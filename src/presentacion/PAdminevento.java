/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * adminevento.java
 *
 * Created on Oct 27, 2009, 7:33:56 PM
 */

package presentacion;

import control.AdministrarEvento;
import entidad.Boleta;
import entidad.Categoria;
import entidad.Escenario;
import entidad.Evento;
import entidad.Historicoevento;
import entidad.Locacion;
import entidad.Organizador;
import entidad.Presentacion;
import java.awt.Color;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author alirio
 */
public class PAdminevento extends javax.swing.JFrame {

    private PAdministrador parent;
    private AdministrarEvento administrarEvento;
    private List<List<Locacion>> locacionesPorPresentacion, locacionesCancelacion;
    private List<Locacion> locaciones;
    private DefaultListModel modeloLocaciones, modeloPresentaciones, modeloEventosEliminacion;
    private List<Presentacion> presentaciones, presentacionesCancelacion;
    private Evento eventoEdicion, eventoCancelacion, eventoEliminacion;
    boolean editando;
    private List<Evento> eventosCancelacion, eventosEliminacion;

    /** Creates new form adminevento */
    public PAdminevento(PAdministrador parent) {
        initComponents();
        this.getContentPane().setBackground(Color.WHITE);
        this.parent=parent;
        editando = false;
        //editarEvento.setVisible(false);
        administrarEvento=new AdministrarEvento();
        modeloLocaciones = new DefaultListModel();
        modeloPresentaciones = new DefaultListModel();
        modeloEventosEliminacion = new DefaultListModel();
        locaciones = new ArrayList();
        presentaciones = new ArrayList();
        locacionesCancelacion = new ArrayList();
        presentacionesCancelacion = new ArrayList();
        eventosCancelacion = new ArrayList();
        eventosEliminacion = new ArrayList();
        colocarFecha();
        colocarCategorias();
        colocarEscenarios();
        colocarOrganizadores();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        panelRegistro = new javax.swing.JPanel();
        panelGeneral = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nombreEvento = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        descripcion = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        escenario = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        tipo = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        categoria = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        protagonista = new javax.swing.JTextField();
        organizador = new javax.swing.JComboBox();
        panelBoleteria = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        nombreLocacion = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        precio = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        cupo = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaLocaciones = new javax.swing.JList();
        jLabel19 = new javax.swing.JLabel();
        anadirLocacion = new javax.swing.JButton();
        editarLocacion = new javax.swing.JButton();
        limpiarCamposLocacion = new javax.swing.JButton();
        eliminarLocacion = new javax.swing.JButton();
        panelPresentaciones = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        anio = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        mes = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        dia = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        hora = new javax.swing.JTextField();
        minutos = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        tipoHora = new javax.swing.JComboBox();
        anadirPresentacion = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listaPresentaciones = new javax.swing.JList();
        eliminarPresentacion = new javax.swing.JButton();
        registrar = new javax.swing.JButton();
        consultarEvento = new javax.swing.JButton();
        limpiar = new javax.swing.JButton();
        panelCancelacion = new javax.swing.JPanel();
        panelBusqueda = new javax.swing.JPanel();
        jLabel46 = new javax.swing.JLabel();
        cancelacionTipo = new javax.swing.JComboBox();
        jLabel47 = new javax.swing.JLabel();
        cancelacionCategoria = new javax.swing.JComboBox();
        jLabel48 = new javax.swing.JLabel();
        cancelacionEvento = new javax.swing.JComboBox();
        cancelarEvento = new javax.swing.JButton();
        panelEliminacion = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        listaEliminacion = new javax.swing.JList();
        eliminarSeleccionado = new javax.swing.JButton();
        eliminarTodos = new javax.swing.JButton();
        cargarEventosEliminacion = new javax.swing.JButton();
        salir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Administrar eventos");
        setBackground(new java.awt.Color(254, 254, 254));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Administrar eventos", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 18), new java.awt.Color(0, 0, 0))); // NOI18N

        panelRegistro.setBackground(new java.awt.Color(255, 255, 255));

        panelGeneral.setBackground(new java.awt.Color(255, 255, 255));
        panelGeneral.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Aspectos Generales", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 3, 13), new java.awt.Color(0, 0, 0))); // NOI18N

        jLabel1.setText("Nombre:");

        jLabel2.setText("Descripcion:");

        descripcion.setColumns(20);
        descripcion.setRows(5);
        jScrollPane1.setViewportView(descripcion);

        jLabel5.setText("Escenario:");

        jLabel3.setText("Tipo:");

        tipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoActionPerformed(evt);
            }
        });

        jLabel4.setText("Categor√≠a:");

        jLabel21.setText("Organizador:");

        jLabel23.setText("Protagonista:");

        javax.swing.GroupLayout panelGeneralLayout = new javax.swing.GroupLayout(panelGeneral);
        panelGeneral.setLayout(panelGeneralLayout);
        panelGeneralLayout.setHorizontalGroup(
            panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGeneralLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(panelGeneralLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(nombreEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel3)
                    .addComponent(jLabel23))
                .addGap(39, 39, 39)
                .addGroup(panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(protagonista)
                    .addComponent(organizador, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(escenario, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(categoria, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tipo, javax.swing.GroupLayout.Alignment.LEADING, 0, 148, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelGeneralLayout.setVerticalGroup(
            panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGeneralLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(nombreEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1))
                    .addGroup(panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)))
                .addGap(11, 11, 11)
                .addGroup(panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelGeneralLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(categoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(escenario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(organizador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(protagonista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23)))
                    .addGroup(panelGeneralLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        panelBoleteria.setBackground(new java.awt.Color(255, 255, 255));
        panelBoleteria.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Locaciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 3, 13), new java.awt.Color(0, 0, 0))); // NOI18N

        jLabel6.setText("Nombre:");

        jLabel7.setText("Precio:");

        jLabel8.setText("Cupo:");

        jLabel18.setText("Lista de locaciones:");

        listaLocaciones.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listaLocaciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaLocacionesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(listaLocaciones);

        jLabel19.setText("$");

        anadirLocacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/presentacion/imagenes/add.gif"))); // NOI18N
        anadirLocacion.setText("A√±adir");
        anadirLocacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anadirLocacionActionPerformed(evt);
            }
        });

        editarLocacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/presentacion/imagenes/edit.gif"))); // NOI18N
        editarLocacion.setText("Editar");
        editarLocacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarLocacionActionPerformed(evt);
            }
        });

        limpiarCamposLocacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/presentacion/imagenes/new.gif"))); // NOI18N
        limpiarCamposLocacion.setText("Limpiar");
        limpiarCamposLocacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarCamposLocacionActionPerformed(evt);
            }
        });

        eliminarLocacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/presentacion/imagenes/salir.gif"))); // NOI18N
        eliminarLocacion.setText("Eliminar");
        eliminarLocacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarLocacionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBoleteriaLayout = new javax.swing.GroupLayout(panelBoleteria);
        panelBoleteria.setLayout(panelBoleteriaLayout);
        panelBoleteriaLayout.setHorizontalGroup(
            panelBoleteriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBoleteriaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBoleteriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBoleteriaLayout.createSequentialGroup()
                        .addGroup(panelBoleteriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelBoleteriaLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(20, 20, 20)
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel6)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelBoleteriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cupo, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nombreLocacion, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(precio, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelBoleteriaLayout.createSequentialGroup()
                        .addGroup(panelBoleteriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(editarLocacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(limpiarCamposLocacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelBoleteriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(eliminarLocacion)
                            .addComponent(anadirLocacion, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addGroup(panelBoleteriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        panelBoleteriaLayout.setVerticalGroup(
            panelBoleteriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBoleteriaLayout.createSequentialGroup()
                .addComponent(jLabel18)
                .addGroup(panelBoleteriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBoleteriaLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(panelBoleteriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(nombreLocacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelBoleteriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(jLabel7)
                            .addComponent(precio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelBoleteriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(cupo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelBoleteriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(editarLocacion)
                            .addComponent(anadirLocacion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelBoleteriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(limpiarCamposLocacion)
                            .addComponent(eliminarLocacion)))
                    .addGroup(panelBoleteriaLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        panelPresentaciones.setBackground(new java.awt.Color(255, 255, 255));
        panelPresentaciones.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Presentaciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 3, 13), new java.awt.Color(0, 0, 0))); // NOI18N

        jLabel9.setText("Fecha:");

        jLabel10.setText("A√±o");

        jLabel11.setText("Mes");

        mes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" }));

        jLabel13.setText("D√≠a");

        jLabel16.setText("hora:");

        jLabel17.setText(":");

        tipoHora.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "am", "pm" }));

        anadirPresentacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/presentacion/imagenes/add.gif"))); // NOI18N
        anadirPresentacion.setText("A√±adir");
        anadirPresentacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anadirPresentacionActionPerformed(evt);
            }
        });

        jLabel20.setText("Presentaciones:");

        listaPresentaciones.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(listaPresentaciones);

        eliminarPresentacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/presentacion/imagenes/eliminar.gif"))); // NOI18N
        eliminarPresentacion.setText("Eliminar");
        eliminarPresentacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarPresentacionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelPresentacionesLayout = new javax.swing.GroupLayout(panelPresentaciones);
        panelPresentaciones.setLayout(panelPresentacionesLayout);
        panelPresentacionesLayout.setHorizontalGroup(
            panelPresentacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPresentacionesLayout.createSequentialGroup()
                .addGroup(panelPresentacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPresentacionesLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel9))
                    .addGroup(panelPresentacionesLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelPresentacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelPresentacionesLayout.createSequentialGroup()
                                .addGroup(panelPresentacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16)
                                    .addComponent(jLabel13))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelPresentacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelPresentacionesLayout.createSequentialGroup()
                                        .addComponent(hora, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel17)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(minutos, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(tipoHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(dia, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(panelPresentacionesLayout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(mes, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelPresentacionesLayout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(anio, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(47, 47, 47)
                .addGroup(panelPresentacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20)
                    .addGroup(panelPresentacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(panelPresentacionesLayout.createSequentialGroup()
                            .addComponent(eliminarPresentacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(anadirPresentacion, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        panelPresentacionesLayout.setVerticalGroup(
            panelPresentacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPresentacionesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPresentacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel20))
                .addGroup(panelPresentacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPresentacionesLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(panelPresentacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(anio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelPresentacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(mes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelPresentacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(dia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelPresentacionesLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(panelPresentacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPresentacionesLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(panelPresentacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(hora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17)
                            .addComponent(minutos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tipoHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelPresentacionesLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(eliminarPresentacion))
                    .addGroup(panelPresentacionesLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(anadirPresentacion)))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        registrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/presentacion/imagenes/register.gif"))); // NOI18N
        registrar.setText("Registrar evento");
        registrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrarActionPerformed(evt);
            }
        });

        consultarEvento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/presentacion/imagenes/search.gif"))); // NOI18N
        consultarEvento.setText("Consultar evento");
        consultarEvento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultarEventoActionPerformed(evt);
            }
        });

        limpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/presentacion/imagenes/new.gif"))); // NOI18N
        limpiar.setText("Limpiar");
        limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelRegistroLayout = new javax.swing.GroupLayout(panelRegistro);
        panelRegistro.setLayout(panelRegistroLayout);
        panelRegistroLayout.setHorizontalGroup(
            panelRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRegistroLayout.createSequentialGroup()
                .addGroup(panelRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelRegistroLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelBoleteria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(panelRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelRegistroLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(limpiar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 115, Short.MAX_VALUE)
                                .addComponent(consultarEvento)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(registrar, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11))
                            .addGroup(panelRegistroLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(panelPresentaciones, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE))))
                    .addGroup(panelRegistroLayout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(panelGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelRegistroLayout.setVerticalGroup(
            panelRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRegistroLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(panelGeneral, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelPresentaciones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelBoleteria, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addGroup(panelRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registrar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(consultarEvento)
                    .addComponent(limpiar))
                .addGap(38, 38, 38))
        );

        jTabbedPane1.addTab("Registrar", panelRegistro);

        panelCancelacion.setBackground(new java.awt.Color(255, 255, 255));

        panelBusqueda.setBackground(new java.awt.Color(255, 255, 255));
        panelBusqueda.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Busqueda Evento:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 3, 13), new java.awt.Color(0, 0, 0))); // NOI18N

        jLabel46.setText("Tipo:");

        cancelacionTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelacionTipoActionPerformed(evt);
            }
        });

        jLabel47.setText("Categor√≠a:");

        cancelacionCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelacionCategoriaActionPerformed(evt);
            }
        });

        jLabel48.setText("Evento:");

        javax.swing.GroupLayout panelBusquedaLayout = new javax.swing.GroupLayout(panelBusqueda);
        panelBusqueda.setLayout(panelBusquedaLayout);
        panelBusquedaLayout.setHorizontalGroup(
            panelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBusquedaLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(panelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel46)
                    .addGroup(panelBusquedaLayout.createSequentialGroup()
                        .addGroup(panelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel47)
                            .addComponent(jLabel48))
                        .addGap(38, 38, 38)
                        .addGroup(panelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cancelacionEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelBusquedaLayout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cancelacionTipo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(cancelacionCategoria, javax.swing.GroupLayout.Alignment.LEADING, 0, 174, Short.MAX_VALUE)))))
                .addGap(25, 25, 25))
        );
        panelBusquedaLayout.setVerticalGroup(
            panelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBusquedaLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(panelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel46)
                    .addComponent(cancelacionTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelacionCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel47))
                .addGap(18, 18, 18)
                .addGroup(panelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel48)
                    .addComponent(cancelacionEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        cancelarEvento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/presentacion/imagenes/eliminar.gif"))); // NOI18N
        cancelarEvento.setText("Cancelar evento");
        cancelarEvento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarEventoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelCancelacionLayout = new javax.swing.GroupLayout(panelCancelacion);
        panelCancelacion.setLayout(panelCancelacionLayout);
        panelCancelacionLayout.setHorizontalGroup(
            panelCancelacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCancelacionLayout.createSequentialGroup()
                .addGap(196, 196, 196)
                .addGroup(panelCancelacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelarEvento))
                .addContainerGap(356, Short.MAX_VALUE))
        );
        panelCancelacionLayout.setVerticalGroup(
            panelCancelacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCancelacionLayout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(panelBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87)
                .addComponent(cancelarEvento)
                .addContainerGap(184, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Cancelar", panelCancelacion);

        panelEliminacion.setBackground(new java.awt.Color(255, 255, 255));

        jPanel12.setBackground(new java.awt.Color(255, 255, 255));
        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Eventos para eliminaci√≥n:", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 3, 13), new java.awt.Color(0, 0, 0))); // NOI18N

        listaEliminacion.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane8.setViewportView(listaEliminacion);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap(78, Short.MAX_VALUE)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        eliminarSeleccionado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/presentacion/imagenes/delete.gif"))); // NOI18N
        eliminarSeleccionado.setText("Eliminar seleccionado");
        eliminarSeleccionado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarSeleccionadoActionPerformed(evt);
            }
        });

        eliminarTodos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/presentacion/imagenes/deleteall.gif"))); // NOI18N
        eliminarTodos.setText("Eliminar todos");
        eliminarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarTodosActionPerformed(evt);
            }
        });

        cargarEventosEliminacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/presentacion/imagenes/load.gif"))); // NOI18N
        cargarEventosEliminacion.setText("Cargar eventos");
        cargarEventosEliminacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarEventosEliminacionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelEliminacionLayout = new javax.swing.GroupLayout(panelEliminacion);
        panelEliminacion.setLayout(panelEliminacionLayout);
        panelEliminacionLayout.setHorizontalGroup(
            panelEliminacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEliminacionLayout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(panelEliminacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cargarEventosEliminacion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eliminarSeleccionado, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eliminarTodos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(202, 202, 202))
        );
        panelEliminacionLayout.setVerticalGroup(
            panelEliminacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEliminacionLayout.createSequentialGroup()
                .addGroup(panelEliminacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelEliminacionLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelEliminacionLayout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(cargarEventosEliminacion)
                        .addGap(18, 18, 18)
                        .addComponent(eliminarSeleccionado)
                        .addGap(18, 18, 18)
                        .addComponent(eliminarTodos)))
                .addContainerGap(76, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Eliminar", panelEliminacion);

        salir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/presentacion/imagenes/salir.gif"))); // NOI18N
        salir.setText("Salir");
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 960, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(salir, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(salir)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Metodo que define lo que se hace al presionar el boton de salida */
    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        this.setVisible(false);
        parent.setVisible(true);
    }//GEN-LAST:event_salirActionPerformed

    /** Metodo que define lo que sucede al cerrarse la ventana de administracion de eventos */
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        //Hace visible la ventana que lo llamo
        parent.setVisible(true);
    }//GEN-LAST:event_formWindowClosed

    private void registrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrarActionPerformed
        if(comprobarCampos()){
            if (!((String)escenario.getSelectedItem()).equals("- No registra -")){
                if (!((String)organizador.getSelectedItem()).equals("- No registra -")){
                    if (!locaciones.isEmpty()){
                        if (!presentaciones.isEmpty()){
                            Evento evento = organizarEvento(null);
                            if (administrarEvento.registrar(evento)){
                                resetearFormulario();
                                cancelacionTipo.setSelectedIndex(0);
                                JOptionPane.showMessageDialog(null, "El evento fue creado con exito");
                            }else
                                JOptionPane.showMessageDialog(null, "El evento ya est√° registrado");
                        }else
                            JOptionPane.showMessageDialog(null, "Se deben a√±adir presentaciones al evento");
                    }else
                        JOptionPane.showMessageDialog(null, "Se debe crear por lo menos una locacion");
                }else
                    JOptionPane.showMessageDialog(null, "No hay organizadores en la base de datos");
            }else
                JOptionPane.showMessageDialog(null, "No hay escenarios en la base de datos");
        }else
            JOptionPane.showMessageDialog(null, "Todos los campos de informacion general deben estar llenos");
    }//GEN-LAST:event_registrarActionPerformed

    /**  Metodo para a√±adir una locacion
     * Ocurre cuando se presiona el boton a√±adir del panel de locaciones
     */
    private void anadirLocacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anadirLocacionActionPerformed
        //Se verifica que todos los campos esten diligenciados
        if (comprobarPanelLocaciones(1)){
            JOptionPane.showMessageDialog(null, "Todos los campos deben estar llenos");
        }else{
            //Se crea una locacion con los datos del formulario
            Locacion locacion = new Locacion();
            locacion.setNombre(nombreLocacion.getText());
            locacion.setPrecio(Double.valueOf(precio.getText()).doubleValue());
            locacion.setCupo(Integer.parseInt(cupo.getText()));
            locacion.setVendidas(0);
            //Se verifica que la locacion no existe
            if(!locacionesContiene(locacion)){
                //Se a√±ade la locacion a la lista de locaciones que seran registradas con el evento
                locaciones.add(locacion);                        
                modeloLocaciones.addElement(locacion.getNombre());
                listaLocaciones.setModel(modeloLocaciones);
                limpiarPanelLocaciones();
            }else
                JOptionPane.showMessageDialog(null, "La locaci√≥n ya fue creada");
        }
    }//GEN-LAST:event_anadirLocacionActionPerformed

    /** Metodo para editar una locacion
     * Ocurre cuando se presiona el boton editar del panel de locaciones
     */
    private void editarLocacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarLocacionActionPerformed
        Locacion locacion;
        //Verifica que hay un valor seleccionado en la lista de locaciones
        if(listaLocaciones.getSelectedValue() != null){
            //Verifica que los campos del formulario esten completamente diligenciados
            if(!comprobarPanelLocaciones(1)){
                //Obtiene la posicion de la lista donde esta guarda la locacion a editar
                int pos=listaLocaciones.getSelectedIndex();                
                //Se obtienen los valores del formulario como una nueva locacion
                locacion = new Locacion();
                locacion.setId(locaciones.get(pos).getId());
                locacion.setNombre(nombreLocacion.getText());
                locacion.setPrecio(Double.valueOf(precio.getText()).doubleValue());
                locacion.setCupo(Integer.parseInt(cupo.getText()));
                if (locaciones.get(pos).getVendidas() == 0)
                    locacion.setVendidas(0);
                else
                    locacion.setVendidas(locaciones.get(pos).getVendidas());
                //Verifica que se ha editado por lo menos un campo de la locacion
                if(!locacion.getNombre().equals(locaciones.get(pos).getNombre()) ||
                        locacion.getPrecio() != locaciones.get(pos).getPrecio() ||
                        locacion.getCupo() != locaciones.get(pos).getCupo()){
                    //Verifica que no halla otra locacion con el mismo nombre
                    if(!locacionesContiene(locacion) || (locacionesContiene(locacion) && locacion.getNombre().equals(listaLocaciones.getSelectedValue()))){
                        //Se modifica la locacion con los nuevos datos ingresados
                        locaciones.set(pos, locacion);
                        modeloLocaciones.setElementAt(locaciones.get(pos).getNombre(), listaLocaciones.getSelectedIndex());
                        listaLocaciones.setModel(modeloLocaciones);
                        limpiarPanelLocaciones();
                    }else{
                        JOptionPane.showMessageDialog(null, "La locaci√≥n ya fue creada");
                        nombreLocacion.setText((String)listaLocaciones.getSelectedValue());
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "No se cambiaron datos a la locaci√≥n");
                }
            }else{
                JOptionPane.showMessageDialog(null, "Todos los campos deben estar llenos");
            }
        }else{
            JOptionPane.showMessageDialog(null, "Debe seleccionar una locaci√≥n de la lista");
        }
    }//GEN-LAST:event_editarLocacionActionPerformed

    /** Metodo que define el evento de mouse clicked sobre la lista de locaciones
     *  Cuando se selecciona una locacion de la lista se muestran los datos
     *  en los cuadros de texto correspondientes
     */
    private void listaLocacionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaLocacionesMouseClicked
        Locacion locacion;
        int pos;
        if(listaLocaciones.getSelectedValue() != null){
            //Se obtiene la posicion en la lista donde esta la locacion seleccionada
            pos = listaLocaciones.getSelectedIndex();
            //Se obtiene la locacion seleccionada
            locacion = locaciones.get(pos);
            //Se escriben los datos de la locacion seleccionada en los campos correspondientes
            nombreLocacion.setText(locacion.getNombre());
            precio.setText("" + locacion.getPrecio());
            cupo.setText("" + locacion.getCupo());
        }
    }//GEN-LAST:event_listaLocacionesMouseClicked

    /**Metodo para definir las categorias
     * Ocurre cuando se realiza alguna accion con el componente de tipo de evento
     */
    private void tipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoActionPerformed
        //Se obtiene la categoria seleccionada en tipo de evento
        Categoria cat = administrarEvento.getCategoriaByName((String)tipo.getSelectedItem());
        //Se obtienen las categorias relacionadas con ese tipo de evento
        List<Categoria> categorias = administrarEvento.getCategoriaByType(cat);
        categoria.removeAllItems();
        //Se verifica que se encontraron categorias
        if (!categorias.isEmpty()){
            for (int i=0; i<categorias.size(); i++){
                //Se actualiza la lista de categorias
                categoria.addItem(categorias.get(i).getNombre());
            }
        }else{
            categoria.addItem("- No registra -");
        }
    }//GEN-LAST:event_tipoActionPerformed

    /** Metodo para limpiar los campos del registro de locaciones 
     * Ocurre cuando se presiona el boton de limpiar en el panel de locaciones
     */
    private void limpiarCamposLocacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarCamposLocacionActionPerformed
        limpiarPanelLocaciones();
        listaLocaciones.setModel(modeloLocaciones);
    }//GEN-LAST:event_limpiarCamposLocacionActionPerformed

    /** Metodo para eliminar una locacion de la lista de locaciones a registrar con el evento
     * Ocurre cuando se presiona el boton eliminar del panel de locaciones
     */
    private void eliminarLocacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarLocacionActionPerformed
        //Se verifica que halla una locacion seleccionada para ser eliminada
        if(listaLocaciones.getSelectedValue() != null){
            //Se obtiene la posicion de la locacion en la lista de locaciones
            int pos = listaLocaciones.getSelectedIndex();
            if (editando){
                if (locaciones.get(pos).getId() != null){
                    boolean flag = true;
                    for (int i=0; i<locacionesPorPresentacion.size(); i++){
                        if (locacionesPorPresentacion.get(i).get(pos).getVendidas() > 0)
                            flag = false;
                    }
                    if (flag){
                        for (int i=0; i<locacionesPorPresentacion.size(); i++){
                            locacionesPorPresentacion.get(i).remove(pos);
                        }
                    }else
                        JOptionPane.showMessageDialog(null, "La locaci√≥n seleccionada presenta boletas vendidas y no puede ser eliminada");
                }else{

                }
            }else{
                //Se elimina la locacion de la lista de locaciones
                locaciones.remove(locaciones.get(pos));
                modeloLocaciones.removeElementAt(pos);
                listaLocaciones.setModel(modeloLocaciones);
                limpiarPanelLocaciones();
            }
        }else
            JOptionPane.showMessageDialog(null, "Debe seleccionar una locaci√≥n de la lista");
    }//GEN-LAST:event_eliminarLocacionActionPerformed

    /** Metodo para a√±adir una fecha de presentacion del evento a la lista de presentaciones
     * Ocurre cuando se presiona el boton de a√±adir en el panel de presentaciones
     */
    private void anadirPresentacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anadirPresentacionActionPerformed
        Presentacion presentacion;
        //Se comprueba que todos los campos necesarios del formulario contengan informacion
        if (comprobarPanelPresentaciones()){
            JOptionPane.showMessageDialog(null, "Todos los campos deben estar llenos");
        }else{
            boolean parsing = true;
            Date fecha = null;
            //se realiza un String con el formato de fecha a ingresar obteniendo los datos del formulario
            String textoFecha = "" + anio.getSelectedItem() + "-" + (mes.getSelectedIndex()+1) + "-" + dia.getText() + " "
                    + hora.getText() + ":" + minutos.getText() + " " + tipoHora.getSelectedItem();
            SimpleDateFormat formatoFecha = new SimpleDateFormat("yyyy-MM-dd hh:mm a");
            try {
                //Se obtiene la fecha a partir del String de formato de fecha
                fecha = formatoFecha.parse(textoFecha);
            } catch (ParseException ex) {
                parsing=false;
            }
            //Se verifica que se obtuvo correctamente la fecha
            if(parsing){
                //Se verifica que la fecha sea v√°lida
                Date actual = new Date();
                if(fecha.compareTo(actual) > 0){
                    if (administrarEvento.comprobarDisponibilidadEscenario(fecha , escenario.getSelectedItem())){
                        //Se crea una presentacion nueva con la fecha obtenida
                        presentacion = new Presentacion();
                        presentacion.setFecha(fecha);
                        presentacion.setHora(fecha);
                        //Se agrega la presentacion a la lista de presentaciones
                        presentaciones.add(presentacion);
                        modeloPresentaciones.addElement(presentacion.getFecha());
                        listaPresentaciones.setModel(modeloPresentaciones);
                    }else
                        JOptionPane.showMessageDialog(null, "El escenario ya esta asignado para esa fecha");
                }else
                    JOptionPane.showMessageDialog(null, "Debe organizar una fecha posterior a la fecha actual");
            }
        }
    }//GEN-LAST:event_anadirPresentacionActionPerformed

    /** Metodo para eliminar una presentacion de la lista de presentaciones
     * Ocurre cuando se presiona el boton de eliminar del panel de presentaciones
     */
    private void eliminarPresentacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarPresentacionActionPerformed
        //Se verifica que hay una presentacion seleccionada de la lista de presentaciones
        if(listaPresentaciones.getSelectedValue() != null){
            //Se obtiene la posicion en la lista de la presentacion a eliminar
            int pos = listaPresentaciones.getSelectedIndex();
            if (presentaciones.get(pos).getId() != null){
                if (administrarEvento.verificarPresentacion(presentaciones.get(pos))){
                    presentaciones.remove(pos);
                    locacionesPorPresentacion.remove(pos);
                    modeloPresentaciones.removeElementAt(pos);
                    listaPresentaciones.setModel(modeloPresentaciones);
                }else
                    JOptionPane.showMessageDialog(null, "Existen boletas vendidas para la presentaci√≥n escogida y no es posible eliminarla");
            }else{
                presentaciones.remove(pos);
                modeloPresentaciones.removeElementAt(pos);
                listaPresentaciones.setModel(modeloPresentaciones);
            }
        }else
            JOptionPane.showMessageDialog(null, "Debe seleccionar una presentaci√≥n de la lista");
    }//GEN-LAST:event_eliminarPresentacionActionPerformed

    private void consultarEventoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultarEventoActionPerformed
        if(!editando){
            resetearFormulario();
            PEditarEventoDialogo editarEvt = new PEditarEventoDialogo(this,true);
            editarEvt.setLocationRelativeTo(null);
            editarEvt.setVisible(true);
            if (eventoEdicion != null){
                editando = true;
                llenarCampos();
            }
        }else
            JOptionPane.showMessageDialog(null, "Hay una edicion en curso. Por favor guarde los cambios para poder continuar");
    }//GEN-LAST:event_consultarEventoActionPerformed

    private void cancelacionCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelacionCategoriaActionPerformed
        eventosCancelacion.clear();
        cancelacionEvento.removeAllItems();
        eventosCancelacion = administrarEvento.getEventosByCategoria((String)cancelacionCategoria.getSelectedItem());
        if (!eventosCancelacion.isEmpty()){
            for (int i=0; i<eventosCancelacion.size(); i++){
                cancelacionEvento.addItem(eventosCancelacion.get(i).getNombre());
            }            
        }else
            cancelacionEvento.addItem("- No registra -");
    }//GEN-LAST:event_cancelacionCategoriaActionPerformed

    private void cancelacionTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelacionTipoActionPerformed
        //Se obtiene la categoria seleccionada en tipo de evento
        Categoria cat = administrarEvento.getCategoriaByName((String)cancelacionTipo.getSelectedItem());
        //Se obtienen las categorias relacionadas con ese tipo de evento
        List<Categoria> categorias = administrarEvento.getCategoriaByType(cat);
        cancelacionCategoria.removeAllItems();
        //Se verifica que se encontraron categorias
        if (!categorias.isEmpty()){
            for (int i=0; i<categorias.size(); i++){
                //Se actualiza la lista de categorias
                cancelacionCategoria.addItem(categorias.get(i).getNombre());
            }
        }else{
            cancelacionCategoria.addItem("- No registra -");
        }
    }//GEN-LAST:event_cancelacionTipoActionPerformed

    private void cancelarEventoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarEventoActionPerformed
        presentacionesCancelacion.clear();
        locacionesCancelacion.clear();
        eventoCancelacion = eventosCancelacion.get(cancelacionEvento.getSelectedIndex());
        if(eventoCancelacion != null){
            presentacionesCancelacion = administrarEvento.getPresentacionesByEvento(eventoCancelacion);
            for (int i=0; i<presentacionesCancelacion.size(); i++)
                locacionesCancelacion.add(administrarEvento.getLocacionesByPresentacion(presentacionesCancelacion.get(i)));
            int confirmado=JOptionPane.showConfirmDialog(this, "Esta acci√≥n cancelar√° el evento y generar√° un reporte de remuneraci√≥n\n¬øSeguro que desea continuar?\n\n", "¬øCancelar el evento?", JOptionPane.YES_NO_OPTION);
            if(confirmado==JOptionPane.YES_OPTION){
                boolean cancelo = administrarEvento.cancelarEvento(eventoCancelacion);
                if (cancelo){
                    JOptionPane.showMessageDialog(null, "El evento ha sido cancelado y se ha generado un reporte de remuneraci√≥n");
                    
                }else
                    JOptionPane.showMessageDialog(null, "El evento ha sido cancelado.\nNo se realiz√≥ reporte de remuneraci√≥n ya que el evento no registraba ventas");
                eventosCancelacion.clear();
                eventoCancelacion = null;
                presentaciones.clear();
                locaciones.clear();
                cancelacionTipo.setSelectedIndex(0);
            }
        }else
            JOptionPane.showMessageDialog(null, "No se ha seleccionado un evento para cancelaci√≥n");
    }//GEN-LAST:event_cancelarEventoActionPerformed

    private void cargarEventosEliminacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarEventosEliminacionActionPerformed
        eventosEliminacion.clear();
        modeloEventosEliminacion.removeAllElements();
        eventosEliminacion = administrarEvento.obtenerEventosParaEliminacion();
        if (!eventosEliminacion.isEmpty()){
            for (int i=0; i<eventosEliminacion.size(); i++){
                modeloEventosEliminacion.addElement(eventosEliminacion.get(i).getNombre());

                System.out.println(eventosEliminacion.get(i).getEstado());

            }
        }else
            JOptionPane.showMessageDialog(null, "No hay eventos para eliminaci√≥n");
        listaEliminacion.setModel(modeloEventosEliminacion);
    }//GEN-LAST:event_cargarEventosEliminacionActionPerformed

    private void eliminarSeleccionadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarSeleccionadoActionPerformed
        presentaciones.clear();
        locaciones.clear();
        int totalBoletas, totalVendidas;
        List<Boleta> boletas = new ArrayList();
        Historicoevento aux;
        if (listaEliminacion.getSelectedIndex() >= 0){
            eventoEliminacion = eventosEliminacion.get(listaEliminacion.getSelectedIndex());

            System.out.println(eventoEliminacion.getEstado());

            presentaciones = administrarEvento.getPresentacionesByEvento(eventoEliminacion);
            for (int i=0; i<presentaciones.size(); i++){
                aux = new Historicoevento();
                aux.setFecha(presentaciones.get(i).getFecha());
                aux.setEvento(eventoEliminacion.getNombre());
                aux.setEstado(eventoEliminacion.getEstado());
                totalBoletas = 0;
                totalVendidas = 0;
                locaciones.clear();
                locaciones = administrarEvento.getLocacionesByPresentacion(presentaciones.get(i));
                for (int j=0; j<locaciones.size(); j++){
                    totalBoletas += locaciones.get(j).getCupo();
                    totalVendidas += locaciones.get(j).getVendidas();
                    boletas = administrarEvento.getBoletasByLocacion(locaciones.get(j));
                    if (!boletas.isEmpty()){
                        for (int k=0; k<boletas.size(); k++){
                            administrarEvento.eliminarBoleta(boletas.get(k));
                        }
                    }
                    aux.setTotalBoletas(totalBoletas);
                    aux.setBoletasVendidas(totalVendidas);                    
                    administrarEvento.eliminarLocacion(locaciones.get(j));
                }
                administrarEvento.eliminarPresentacion(presentaciones.get(i));
                administrarEvento.generarHistorico(aux);
            }
            administrarEvento.eliminarEvento(eventoEliminacion);
            presentaciones.clear();
            locaciones.clear();
            eventosEliminacion.remove(eventoEliminacion);
            modeloEventosEliminacion.remove(listaEliminacion.getSelectedIndex());
            listaEliminacion.setModel(modeloEventosEliminacion);
            JOptionPane.showMessageDialog(null, "El evento fue eliminado de la base de datos");
        }else
            JOptionPane.showMessageDialog(null, "Debe seleccionar un evento de la lista");
    }//GEN-LAST:event_eliminarSeleccionadoActionPerformed

    private void eliminarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarTodosActionPerformed
        List<Presentacion> presentacionesE = new ArrayList();
        List<Locacion> locacionesE = new ArrayList();
        List<Boleta> boletas = new ArrayList();
        if (!eventosEliminacion.isEmpty()){
            for (int i=0; i<eventosEliminacion.size(); i++){
                presentacionesE = administrarEvento.getPresentacionesByEvento(eventosEliminacion.get(i));
                for (int j=0; j<presentacionesE.size(); j++){
                    locacionesE = administrarEvento.getLocacionesByPresentacion(presentacionesE.get(j));
                    for (int k=0; k<locacionesE.size(); k++){
                        boletas = administrarEvento.getBoletasByLocacion(locacionesE.get(k));
                        if (!boletas.isEmpty()){
                            for (int l=0; l<boletas.size(); l++){
                                administrarEvento.eliminarBoleta(boletas.get(l));
                            }
                        }
                        administrarEvento.eliminarLocacion(locacionesE.get(k));
                    }
                    administrarEvento.eliminarPresentacion(presentacionesE.get(j));
                }
                administrarEvento.eliminarEvento(eventosEliminacion.get(i));
            }
            eventosEliminacion.clear();
            modeloEventosEliminacion.clear();
            listaEliminacion.setModel(modeloEventosEliminacion);
            JOptionPane.showMessageDialog(null, "Se eliminaron los eventos correctamente");
        }else
            JOptionPane.showMessageDialog(null, "No hay eventos para eliminar");
    }//GEN-LAST:event_eliminarTodosActionPerformed

    private void limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarActionPerformed
        resetearFormulario();
    }//GEN-LAST:event_limpiarActionPerformed

    /** Metodo para colocar la fecha actual al iniciar la ventana */
    private void colocarFecha(){
        //Se obtiene la fecha actual
        Calendar calendar = Calendar.getInstance();
        //Se actualizan los campos del formulario de presentaciones con los datos de la fecha actual
        for(int i=0;i<5;i++){
            anio.addItem(calendar.get(Calendar.YEAR)+i);
        }
        mes.setSelectedIndex(calendar.get(Calendar.MONTH));
        dia.setText("" + calendar.get(Calendar.DAY_OF_MONTH));
        hora.setText("" + calendar.get(Calendar.HOUR));
        minutos.setText("" + calendar.get(Calendar.MINUTE));

        if(calendar.get(Calendar.AM) == 0)
            tipoHora.setSelectedIndex(0);
        else
            tipoHora.setSelectedIndex(1);
    }

    private void colocarCategorias(){
        List<Categoria> categorias = administrarEvento.getCategorias();
        if (!categorias.isEmpty()){
            for (int i=0; i<categorias.size(); i++){
                if (categorias.get(i).getFkCategoria() == null){
                    tipo.addItem(categorias.get(i).getNombre());
                    cancelacionTipo.addItem(categorias.get(i).getNombre());
                }
            }
        }
    }

    private void colocarEscenarios(){
        List<Escenario> escenarios = administrarEvento.getEscenarios();
        if (!escenarios.isEmpty()){
            for (int i=0; i<escenarios.size(); i++){
                escenario.addItem(escenarios.get(i).getNombre());
            }
        }else{
            escenario.addItem("- No registra -");
        }
    }

    private void colocarOrganizadores(){
        List<Organizador> organizadores = administrarEvento.getOrganizadores();
        if (!organizadores.isEmpty()){
            for (int i=0; i<organizadores.size(); i++){
                organizador.addItem(organizadores.get(i).getNombre());
            }
        }else
            organizador.addItem("- No registra -");
    }

    private boolean comprobarPanelLocaciones(int tipo) {
        boolean flag = false;
        switch (tipo){
            case 1:
                if(nombreLocacion.getText().equals("") || precio.getText().equals("") || cupo.getText().equals(""))
                     flag = true;
                break;
            case 2:
                break;
        }

        return flag;
    }

    private void limpiarPanelLocaciones() {
        nombreLocacion.setText(null);
        precio.setText(null);
        cupo.setText(null);
    }

    private boolean locacionesContiene(Locacion locacion) {
        boolean existe = false;
        int i=0,size = locaciones.size();
        while (!existe && i<size){
            if (locacion.getNombre().equals(locaciones.get(i).getNombre())){
                existe = true;
            }
            i++;
        }
        return existe;
    }

    private boolean comprobarPanelPresentaciones() {
        boolean flag = false;
        if(dia.getText() == null || hora.getText() == null || minutos.getText() == null)
            flag = true;

        return flag;
    }

    private void llenarCampos() {
        int i=0;
        nombreEvento.setText(eventoEdicion.getNombre());
        descripcion.setText(eventoEdicion.getDescripcion());
        protagonista.setText(eventoEdicion.getArtista());
        tipo.setSelectedIndex(i);
        while (!eventoEdicion.getFkCategoria().getFkCategoria().getNombre().equals((String)tipo.getSelectedItem())){
            i++;
            tipo.setSelectedIndex(i);
        }
        i=0;
        categoria.setSelectedIndex(i);
        while (!eventoEdicion.getFkCategoria().getNombre().equals((String)categoria.getSelectedItem())){
            i++;
            categoria.setSelectedIndex(i);
        }
        i=0;
        escenario.setSelectedIndex(i);
        while (!eventoEdicion.getFkEscenario().getNombre().equals((String)escenario.getSelectedItem())){
            i++;
            escenario.setSelectedIndex(i);
        }
        i=0;
        organizador.setSelectedIndex(i);
        while (!eventoEdicion.getFkOrganizador().getNombre().equals((String)organizador.getSelectedItem())){
            i++;
            organizador.setSelectedIndex(i);
        }
        for (i=0; i<locaciones.size(); i++){
            modeloLocaciones.addElement(locaciones.get(i).getNombre());
        }
        listaLocaciones.setModel(modeloLocaciones);
        for (i=0; i<presentaciones.size(); i++){
            modeloPresentaciones.addElement(presentaciones.get(i).getFecha());
        }
        listaPresentaciones.setModel(modeloPresentaciones);
    }

    private void resetearFormulario() {
        editando = false;
        nombreEvento.setText(null);
        descripcion.setText(null);
        tipo.setSelectedIndex(0);
        escenario.setSelectedIndex(0);
        organizador.setSelectedIndex(0);
        protagonista.setText(null);
        locaciones.clear();
        presentaciones.clear();
        limpiarPanelLocaciones();
        modeloLocaciones.clear();
        listaLocaciones.setModel(modeloLocaciones);
        modeloPresentaciones.clear();
        listaPresentaciones.setModel(modeloPresentaciones);
    }
    private boolean comprobarCampos(){
        boolean flag = true;
        if(nombreEvento.getText().equals("") || descripcion.getText().equals("") || protagonista.getText().equals(""))
            flag = false;
        return flag;
    }

    private Evento organizarEvento(Evento evento) {
        if(evento == null){
            evento = new Evento();
            evento.setEstado("Activo");
        }
        Escenario esc = administrarEvento.getEscenarioByName((String)escenario.getSelectedItem());
        Categoria cat = administrarEvento.getCategoriaByName((String)categoria.getSelectedItem());
        Organizador org = administrarEvento.getOrganizadorByName((String)organizador.getSelectedItem());
        evento.setNombre(nombreEvento.getText());
        evento.setDescripcion(descripcion.getText());
        evento.setArtista(protagonista.getText());
        evento.setFkEscenario(esc);
        evento.setFkCategoria(cat);
        evento.setFkOrganizador(org);
        evento.setPresentacionList(presentaciones);
        if (!editando){
            for(int i=0; i<presentaciones.size(); i++){
                evento.getPresentacionList().get(i).setLocacionList(locaciones);
            }
        }else{
            locacionesPorPresentacion.set(0, locaciones);
            for (int i=0; i<presentaciones.size(); i++){
                if (presentaciones.get(i).getId() != null){
                    evento.getPresentacionList().get(i).setLocacionList(locacionesPorPresentacion.get(i));
                }else{
                    
                }
            }
        }
        return evento;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton anadirLocacion;
    private javax.swing.JButton anadirPresentacion;
    private javax.swing.JComboBox anio;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cancelacionCategoria;
    private javax.swing.JComboBox cancelacionEvento;
    private javax.swing.JComboBox cancelacionTipo;
    private javax.swing.JButton cancelarEvento;
    private javax.swing.JButton cargarEventosEliminacion;
    private javax.swing.JComboBox categoria;
    private javax.swing.JButton consultarEvento;
    private javax.swing.JTextField cupo;
    private javax.swing.JTextArea descripcion;
    private javax.swing.JTextField dia;
    private javax.swing.JButton editarLocacion;
    private javax.swing.JButton eliminarLocacion;
    private javax.swing.JButton eliminarPresentacion;
    private javax.swing.JButton eliminarSeleccionado;
    private javax.swing.JButton eliminarTodos;
    private javax.swing.JComboBox escenario;
    private javax.swing.JTextField hora;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton limpiar;
    private javax.swing.JButton limpiarCamposLocacion;
    private javax.swing.JList listaEliminacion;
    private javax.swing.JList listaLocaciones;
    private javax.swing.JList listaPresentaciones;
    private javax.swing.JComboBox mes;
    private javax.swing.JTextField minutos;
    private javax.swing.JTextField nombreEvento;
    private javax.swing.JTextField nombreLocacion;
    private javax.swing.JComboBox organizador;
    private javax.swing.JPanel panelBoleteria;
    private javax.swing.JPanel panelBusqueda;
    private javax.swing.JPanel panelCancelacion;
    private javax.swing.JPanel panelEliminacion;
    private javax.swing.JPanel panelGeneral;
    private javax.swing.JPanel panelPresentaciones;
    private javax.swing.JPanel panelRegistro;
    private javax.swing.JTextField precio;
    private javax.swing.JTextField protagonista;
    private javax.swing.JButton registrar;
    private javax.swing.JButton salir;
    private javax.swing.JComboBox tipo;
    private javax.swing.JComboBox tipoHora;
    // End of variables declaration//GEN-END:variables

    public void setEventoEdicion(Evento evento) {
        this.eventoEdicion = evento;
    }

    public void setLocaciones(List<Locacion> locaciones) {
        this.locaciones = locaciones;
    }

    public void setPresentaciones(List<Presentacion> presentaciones) {
        this.presentaciones = presentaciones;
    }

    public AdministrarEvento getAdministrarEvento() {
        return administrarEvento;
    }

    public void setLocacionesPorPresentacion(List<List<Locacion>> locacionesPorPresentacion) {
        this.locacionesPorPresentacion = locacionesPorPresentacion;
    }
    
}
